// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using SwagLabs.PageObject;
using OpenQA.Selenium.Support.PageObjects;
using SwagLabs;
using System.Configuration;

namespace ST01Login
{
    [TestFixture]
    public class CT03LoginSemInserirSenhaTest
    {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }

        [SetUp]
        public void SetUp()
        {
            //driver = Utils.getBrowserLocal(driver, ConfigurationManager.AppSettings["browser"]);
            driver = Utils.getBrowserRemote(driver, "http://127.0.0.1:4444/wd/hub");
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(15);
            driver.Navigate().GoToUrl("https://www.saucedemo.com/");

            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            driver.Quit();
        }

        [Test]
        public void cT03LoginSemInserirSenha()
        {
        
            Login lg = new Login();

            PageFactory.InitElements(driver, lg);

            //Modelo de como usar variavel do app.config(Para quando usar o mesmo valor várias vezes)    
            lg.inputUsername.SendKeys(ConfigurationManager.AppSettings["email_standard"]);
            lg.btnLogin.Click();
            Assert.That(lg.errorsLogin.Text, Is.EqualTo("Epic sadface: Password is required"));
        }

    }

    [TestFixture]
    public class CT02LoginInvlidoTest
    {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        [SetUp]
        public void SetUp()
        {
            driver = new ChromeDriver();
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }
        [TearDown]
        protected void TearDown()
        {
            driver.Quit();
        }
        [Test]
        public void cT02LoginInvlido()
        {
            driver.Navigate().GoToUrl("https://www.saucedemo.com/");
            driver.FindElement(By.CssSelector("*[data-test=\"username\"]")).SendKeys("asdasd");
            driver.FindElement(By.CssSelector("*[data-test=\"password\"]")).SendKeys("sadasdas");
            driver.FindElement(By.CssSelector("*[data-test=\"login-button\"]")).Click();
            Assert.That(driver.FindElement(By.CssSelector("*[data-test=\"error\"]")).Text, Is.EqualTo("Epic sadface: Username and password do not match any user in this service"));
        }
    }

    [TestFixture]
    public class CT01LoginComSucessoTest
    {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        [SetUp]
        public void SetUp()
        {
            driver = new ChromeDriver();
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }
        [TearDown]
        protected void TearDown()
        {
            driver.Quit();
        }
        [Test]
        public void cT01LoginComSucesso()
        {
            // Acessando site
            driver.Navigate().GoToUrl("https://www.saucedemo.com/");
            // 2 | type | css=*[data-test="username"] | standard_user | Inserindo usuário
            driver.FindElement(By.CssSelector("*[data-test=\"username\"]")).SendKeys("standard_user");
            // 3 | type | css=*[data-test="password"] | secret_sauce | Inserindo senha
            driver.FindElement(By.CssSelector("*[data-test=\"password\"]")).SendKeys("secret_sauce");
            // 4 | click | css=*[data-test="login-button"] |  | Clicando no botão Login
            driver.FindElement(By.CssSelector("*[data-test=\"login-button\"]")).Click();
            // 5 | assertElementPresent | css=.app_logo |  | Validação do login com sucesso
            var elements = driver.FindElements(By.CssSelector(".app_logo"));
            Assert.True(elements.Count > 0);
        }
    }


}
